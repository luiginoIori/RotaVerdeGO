#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para compilar o validador de senha em execut√°vel
Usa PyInstaller para criar arquivo .exe n√£o edit√°vel
"""

import subprocess
import sys
import os


def install_pyinstaller():
    """Instala PyInstaller se n√£o estiver dispon√≠vel"""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller j√° est√° instalado")
        return True
    except ImportError:
        print("üì¶ Instalando PyInstaller...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
            print("‚úÖ PyInstaller instalado com sucesso")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao instalar PyInstaller: {e}")
            return False


def compile_validator():
    """Compila o validador de senha em execut√°vel"""
    
    # Verifica se arquivo fonte existe
    if not os.path.exists("auth_validator.py"):
        print("‚ùå Arquivo auth_validator.py n√£o encontrado!")
        return False
    
    print("üî® Compilando validador de senha...")
    
    try:
        # Comando PyInstaller para criar execut√°vel
        cmd = [
            "pyinstaller",
            "--onefile",                    # Arquivo √∫nico
            "--noconsole",                  # Sem janela de console (opcional)
            "--name=password_validator",    # Nome do execut√°vel
            "--distpath=.",                # Pasta de sa√≠da
            "--workpath=temp_build",       # Pasta tempor√°ria
            "--specpath=temp_build",       # Pasta spec tempor√°ria
            "auth_validator.py"
        ]
        
        # Executa compila√ß√£o
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Compila√ß√£o conclu√≠da com sucesso!")
            print("üìÅ Execut√°vel criado: password_validator.exe")
            
            # Limpa arquivos tempor√°rios
            cleanup_temp_files()
            
            return True
        else:
            print(f"‚ùå Erro na compila√ß√£o: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("‚ùå PyInstaller n√£o encontrado. Instale com: pip install pyinstaller")
        return False
    except Exception as e:
        print(f"‚ùå Erro durante compila√ß√£o: {e}")
        return False


def cleanup_temp_files():
    """Remove arquivos tempor√°rios da compila√ß√£o"""
    try:
        import shutil
        
        # Remove pasta tempor√°ria
        if os.path.exists("temp_build"):
            shutil.rmtree("temp_build")
            print("üßπ Arquivos tempor√°rios removidos")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel limpar arquivos tempor√°rios: {e}")


def create_batch_file():
    """Cria arquivo batch para facilitar execu√ß√£o"""
    batch_content = '''@echo off
title Validador de Senha - Rota Verde
echo.
echo ===================================
echo  VALIDADOR DE SENHA - ROTA VERDE
echo ===================================
echo.
password_validator.exe
echo.
echo Pressione qualquer tecla para sair...
pause > nul
'''
    
    try:
        with open("executar_validador.bat", "w", encoding="utf-8") as f:
            f.write(batch_content)
        print("‚úÖ Arquivo batch criado: executar_validador.bat")
    except Exception as e:
        print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel criar arquivo batch: {e}")


def main():
    """Fun√ß√£o principal"""
    print("üîê COMPILADOR DE VALIDADOR DE SENHA")
    print("==================================")
    
    # Instala PyInstaller se necess√°rio
    if not install_pyinstaller():
        return
    
    # Compila o validador
    if compile_validator():
        create_batch_file()
        
        print("\n‚úÖ PROCESSO CONCLU√çDO!")
        print("=" * 30)
        print("üìÅ Arquivos criados:")
        print("  - password_validator.exe (execut√°vel principal)")
        print("  - executar_validador.bat (facilitador)")
        print("\nüí° Instru√ß√µes:")
        print("  1. Execute 'password_validator.exe' ou 'executar_validador.bat'")
        print("  2. Senhas padr√£o:")
        print("     - RotaVerde2024")
        print("     - FluxoCaixa@2024")
        print("  3. O execut√°vel n√£o pode ser editado/modificado")
        print("  4. Controle de tentativas autom√°tico")
        
    else:
        print("\n‚ùå Falha na compila√ß√£o!")
        print("Verifique os erros acima e tente novamente")


if __name__ == "__main__":
    main()